{"version":3,"sources":["Components/AddCategory.js","Components/helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cats","onSubmit","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cACxB,EAAmCC,mBAAS,IAA5C,mBAAMC,EAAN,KAAkBC,EAAlB,KAMMC,EAAe,SAACC,GACZA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAG5B,OACI,sBAAMO,SAAUN,EAAhB,SACI,uBACJO,KAAK,OACLC,MAAOV,EACPW,SAlBsB,SAACR,GAEvBF,EAAcE,EAAES,OAAOF,QAiBvBF,SAAUN,O,+BCvBJW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCARO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACE,sBAAKc,UAAU,uCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAE1B,ECF4B,SAACA,GACzB,MAA0Bf,mBAAS,CAACsB,KAAK,GACrCa,SAAQ,IADZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAdAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEfH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,UASjBC,EDjBmBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEjB,OACE,qCACE,6BAAKpB,IACFoB,GAAW,wCACd,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEXnBgB,EAAe,WAE1B,MAAoC1C,mBAAS,CACzC,cADJ,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAWE,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI4C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAUA,GADJA,Y,MCrBpB6B,IAASC,OACJ,cAAC,EAAD,IACHC,SAASC,eAAe,W","file":"static/js/main.636b8d23.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory= ({setCategories}) =>{\r\n    const[inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) =>{\r\n       \r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) =>{\r\n              e.preventDefault();\r\n\r\n              if(inputValue.trim().length > 2){\r\n\r\n                  setCategories(cats => [inputValue,...cats ]);\r\n                  setInputValue(\"\")\r\n              }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange }\r\n        onSubmit={handleSubmit}\r\n         />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\n\r\n export const getGifs = async (category) => {\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n     category\r\n   )}&api_key=lcBylulyWpg8984HWPoC87TBIyrB5TsC&limit=10`;\r\n   const resp = await fetch(url);\r\n   const { data } = await resp.json();\r\n   const gifs = data.map((img) => {\r\n     return {\r\n       id: img.id,\r\n       title: img.title,\r\n       url: img.images?.downsized_medium.url,\r\n     };\r\n   });\r\n   return gifs;\r\n   \r\n };\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n      <div className=\"card animate_animated animate_fadeIn\">\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n      </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n \r\nconst {data:images,loading} = useFetchGifs(category);\r\n \r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n        {loading && <p>Loading</p>}\r\n      <div className=\"card-grid\" >\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../Components/helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setstate] = useState({data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category).then(imgs =>{           \r\n                \r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n           \r\n            })\r\n    })\r\n\r\n    \r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n  const [categories, setCategories] = useState([\r\n      \"One Punch\"\r\n        ]);\r\n\r\n   /*  const handleAdd= () =>{\r\n      \r\n     /*  setCategories([...categories, \"Match 5\"]) *\r\n      setCat/egories(cats => [...cats, \"Match 5\"])\r\n      \r\n    } */\r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr />\r\n        <ol>\r\n          {\r\n            categories.map(category =>(\r\n              <GifGrid\r\n               key={category}\r\n              category={category}/>\r\n            ))\r\n          }\r\n        </ol>\r\n      </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n     <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}